/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 15 00:44:08 GMT 2022
 */

package com.baeldung.avltree;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.baeldung.avltree.AVLTree;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AVLTree_ESTest extends AVLTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-1292));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(1116);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(2085);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(2085);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(2);
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.delete((-491));
      assertEquals(2, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(3862);
      assertNotNull(aVLTree_Node0);
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.insert((-846));
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.delete(1116);
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.insert((-2081));
      assertEquals(2, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertNotNull(aVLTree_Node1);
      assertEquals(2, aVLTree0.height());
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      
      aVLTree0.delete(0);
      assertEquals(2, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.find(0);
      assertNull(aVLTree_Node2);
      assertEquals(2, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node3 = aVLTree0.find(0);
      assertNull(aVLTree_Node3);
      assertEquals(2, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-1));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(1902);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-6224));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(1438);
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.delete((-1));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(0);
      assertNull(aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node1);
      assertEquals(1, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(1, aVLTree0.height());
      assertEquals(1, int0);
      
      aVLTree0.delete(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(1626);
      assertEquals(2, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals((-1), aVLTree0.height());
      assertEquals((-1), int0);
      
      aVLTree0.insert(3760);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(3892);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(1472);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-1399));
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node1);
      assertEquals(1, aVLTree0.height());
      assertSame(aVLTree_Node1, aVLTree_Node0);
      
      aVLTree_Node0.right = aVLTree_Node1;
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(4, aVLTree0.height());
      
      int int1 = aVLTree0.getBalance(aVLTree_Node0);
      assertFalse(int1 == int0);
      assertEquals(4, aVLTree0.height());
      assertEquals((-4), int1);
      assertSame(aVLTree_Node0, aVLTree_Node1);
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node2);
      assertEquals(4, aVLTree0.height());
      assertSame(aVLTree_Node2, aVLTree_Node0);
      assertSame(aVLTree_Node2, aVLTree_Node1);
      
      // Undeclared exception!
      aVLTree0.find(1774);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-138));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(1101);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(1127);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(1127);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete((-138));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(1, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(1, aVLTree0.height());
      assertEquals(1, int0);
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      
      int int1 = aVLTree0.getBalance(aVLTree_Node0);
      assertTrue(int1 == int0);
      assertEquals(1, aVLTree0.height());
      assertEquals(1, int1);
      
      int int2 = aVLTree0.getBalance(aVLTree_Node0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, aVLTree0.height());
      assertEquals(1, int2);
      
      aVLTree0.insert(1);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(1727);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-902));
      assertEquals(1, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(1, aVLTree0.height());
      assertEquals(1, int0);
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node0.height = 1;
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node0.height = 1;
      assertEquals(1, aVLTree0.height());
      
      int int1 = aVLTree0.getBalance(aVLTree_Node0);
      assertFalse(int1 == int0);
      assertEquals(1, aVLTree0.height());
      assertEquals((-1), int1);
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node1);
      assertEquals(1, aVLTree0.height());
      assertSame(aVLTree_Node1, aVLTree_Node0);
      
      int int2 = aVLTree0.getBalance((AVLTree.Node) null);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, aVLTree0.height());
      assertEquals(0, int2);
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.find(0);
      assertNull(aVLTree_Node2);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-369));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(809);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree_Node0.right;
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertNotNull(aVLTree_Node1);
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      
      aVLTree_Node1.key = (-1202);
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node0.right = aVLTree_Node1;
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node1.left = aVLTree_Node0;
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node1.left = aVLTree_Node0;
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node0.height = (-1202);
      assertEquals((-1202), aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.insert(1277);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.baeldung.avltree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      int int0 = 2210;
      aVLTree0.delete(2210);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(1721);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-150));
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.new Node(0);
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertNotNull(aVLTree_Node1);
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node0.left = aVLTree_Node1;
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node0.right = aVLTree_Node1;
      assertEquals(1, aVLTree0.height());
      
      int int1 = aVLTree0.getBalance(aVLTree_Node0);
      assertFalse(aVLTree_Node0.equals((Object)aVLTree_Node1));
      assertFalse(int1 == int0);
      assertEquals(1, aVLTree0.height());
      assertEquals(0, int1);
      assertNotSame(aVLTree_Node0, aVLTree_Node1);
      
      int int2 = 1;
      aVLTree_Node1.right = aVLTree_Node0.left;
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(int2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-873));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-732));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-732));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-732));
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-732));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-732));
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find((-732));
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertNotNull(aVLTree_Node1);
      assertEquals(1, aVLTree0.height());
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.getRoot();
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node1));
      assertNotNull(aVLTree_Node2);
      assertEquals(1, aVLTree0.height());
      assertNotSame(aVLTree_Node2, aVLTree_Node1);
      assertSame(aVLTree_Node2, aVLTree_Node0);
      
      int int0 = aVLTree0.height();
      assertEquals(1, aVLTree0.height());
      assertEquals(1, int0);
      
      AVLTree.Node aVLTree_Node3 = aVLTree0.find(0);
      assertNull(aVLTree_Node3);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      int int0 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals((-1), aVLTree0.height());
      assertEquals(0, int0);
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNull(aVLTree_Node0);
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete((-363));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(0, aVLTree0.height());
      assertEquals(0, int0);
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.new Node(0);
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertNotNull(aVLTree_Node1);
      assertEquals(0, aVLTree0.height());
      
      aVLTree_Node1.height = 0;
      assertEquals(0, aVLTree0.height());
      
      int int1 = (-1);
      aVLTree0.delete((-1));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-363));
      assertEquals(1, aVLTree0.height());
      
      int int2 = aVLTree0.getBalance(aVLTree_Node1);
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, aVLTree0.height());
      assertEquals(0, int2);
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      
      // Undeclared exception!
      try { 
        aVLTree0.delete(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.baeldung.avltree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete(1819);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete(1819);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete(3999);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(3999);
      assertNotNull(aVLTree_Node0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(3999);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree_Node0.left;
      assertNull(aVLTree_Node1);
      
      aVLTree0.delete(1819);
      assertEquals(0, aVLTree0.height());
      
      aVLTree_Node0.key = (-1);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-1));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-1));
      assertEquals(1, aVLTree0.height());
      
      int int0 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals(1, aVLTree0.height());
      assertEquals(0, int0);
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.getRoot();
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node0));
      assertNotNull(aVLTree_Node2);
      assertEquals(1, aVLTree0.height());
      assertNotSame(aVLTree_Node2, aVLTree_Node0);
      
      aVLTree0.insert(785);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(0);
      assertNotNull(aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-5214));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(355);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(1218);
      assertEquals(1, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(1, aVLTree0.height());
      assertEquals(1, int0);
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node1);
      assertEquals(1, aVLTree0.height());
      assertSame(aVLTree_Node1, aVLTree_Node0);
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(607);
      assertNull(aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(835);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(1301);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(1301);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(1301);
      assertEquals(0, aVLTree0.height());
      
      int int0 = 1;
      aVLTree0.insert(1);
      assertEquals(1, aVLTree0.height());
      
      int int1 = 472;
      aVLTree0.delete(472);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(1449);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node1);
      assertEquals(1, aVLTree0.height());
      assertSame(aVLTree_Node1, aVLTree_Node0);
      
      aVLTree_Node0.right = aVLTree_Node1;
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node1.height = 2733;
      assertEquals(2733, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(2736, aVLTree0.height());
      
      aVLTree0.insert(int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-191));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-931));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-1067));
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.insert((-931));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("com.baeldung.avltree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals((-1), aVLTree0.height());
      assertEquals((-1), int0);
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNull(aVLTree_Node0);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find(0);
      assertNull(aVLTree_Node1);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(185);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(0, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(0, aVLTree0.height());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-1230));
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(1);
      assertNotNull(aVLTree_Node0);
      assertEquals((-1), aVLTree0.height());
      
      int int0 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals((-1), aVLTree0.height());
      assertEquals(0, int0);
      
      int int1 = aVLTree0.getBalance(aVLTree_Node0);
      assertTrue(int1 == int0);
      assertEquals((-1), aVLTree0.height());
      assertEquals(0, int1);
      
      int int2 = aVLTree0.getBalance(aVLTree_Node0);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), aVLTree0.height());
      assertEquals(0, int2);
      
      int int3 = aVLTree0.height();
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals((-1), aVLTree0.height());
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree aVLTree1 = new AVLTree();
      assertFalse(aVLTree1.equals((Object)aVLTree0));
      assertNotNull(aVLTree1);
      assertEquals((-1), aVLTree1.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree1.find(290);
      assertFalse(aVLTree1.equals((Object)aVLTree0));
      assertNull(aVLTree_Node0);
      assertEquals((-1), aVLTree1.height());
      assertNotSame(aVLTree1, aVLTree0);
      
      int int0 = aVLTree0.getBalance((AVLTree.Node) null);
      assertFalse(aVLTree0.equals((Object)aVLTree1));
      assertEquals((-1), aVLTree0.height());
      assertEquals(0, int0);
      assertNotSame(aVLTree0, aVLTree1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("com.baeldung.avltree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(2139);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-1));
      assertNull(aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(1);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(0, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(0, aVLTree0.height());
      assertEquals(0, int0);
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(3308);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(2029);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-2922));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-1));
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("com.baeldung.avltree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete(999);
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(1844);
      assertNotNull(aVLTree_Node0);
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.insert((-1292));
      aVLTree0.insert(1116);
      aVLTree0.delete(0);
      aVLTree0.delete(2085);
      aVLTree0.delete(0);
      aVLTree0.insert(2085);
      aVLTree0.delete((-491));
      aVLTree0.insert((-2081));
      aVLTree0.getRoot();
      aVLTree0.delete(0);
      aVLTree0.find(0);
      assertEquals(2, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.getRoot();
      int int0 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-1));
      aVLTree0.delete((-523));
      aVLTree0.delete((-523));
      aVLTree0.insert((-1457));
      aVLTree0.delete(0);
      aVLTree0.find(0);
      aVLTree0.find((-1));
      aVLTree0.insert(0);
      aVLTree0.height();
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("com.baeldung.avltree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-1));
      aVLTree0.insert(1902);
      aVLTree0.insert(0);
      aVLTree0.insert(1438);
      aVLTree0.delete(0);
      aVLTree0.delete((-1));
      aVLTree0.insert(0);
      aVLTree0.delete(0);
      aVLTree0.find(0);
      aVLTree0.getRoot();
      aVLTree0.height();
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(157);
      aVLTree0.insert(2059);
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(2059);
      aVLTree0.delete((-893));
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node1.key = 2690;
      aVLTree_Node1.left = aVLTree_Node0;
      aVLTree0.insert((-2581));
      aVLTree0.insert(0);
      aVLTree_Node1.height = 1;
      aVLTree_Node1.height = 2059;
      aVLTree0.getBalance(aVLTree_Node1);
      aVLTree0.insert((-3588));
      AVLTree.Node aVLTree_Node2 = aVLTree0.getRoot();
      aVLTree0.getBalance(aVLTree_Node2);
      aVLTree0.find(1);
      aVLTree0.delete((-1));
      assertEquals(2, aVLTree0.height());
  }
}
