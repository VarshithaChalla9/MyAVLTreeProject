/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 14 00:21:49 GMT 2022
 */

package com.baeldung.avltree;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.baeldung.avltree.AVLTree;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AVLTree_ESTest extends AVLTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(3090);
      aVLTree0.insert((-2320));
      int int0 = 2531;
      aVLTree0.insert(2531);
      aVLTree0.insert(0);
      aVLTree0.insert((-2626));
      aVLTree0.delete(3090);
      aVLTree0.delete(0);
      aVLTree0.insert(3090);
      aVLTree0.insert((-517));
      aVLTree0.delete(1461);
      aVLTree0.delete((-517));
      aVLTree0.height();
      aVLTree0.insert((-517));
      aVLTree0.delete((-2626));
      aVLTree0.delete(1);
      aVLTree0.height();
      aVLTree0.insert(2);
      aVLTree0.getRoot();
      aVLTree0.insert((-347));
      aVLTree0.getRoot();
      // Undeclared exception!
      try { 
        aVLTree0.insert(2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("com.baeldung.avltree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(3097);
      aVLTree0.insert((-2320));
      int int0 = 2531;
      aVLTree0.insert(2531);
      aVLTree0.insert(0);
      aVLTree0.insert(1);
      aVLTree0.delete(3097);
      aVLTree0.delete(0);
      aVLTree0.insert(3097);
      aVLTree0.insert((-517));
      aVLTree0.delete(1461);
      aVLTree0.delete((-517));
      aVLTree0.height();
      aVLTree0.delete(1);
      aVLTree0.delete(1);
      aVLTree0.height();
      aVLTree0.insert(1);
      aVLTree0.getRoot();
      aVLTree0.insert((-347));
      aVLTree0.getRoot();
      // Undeclared exception!
      try { 
        aVLTree0.insert(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("com.baeldung.avltree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(3090);
      aVLTree0.insert((-2320));
      aVLTree0.insert(2531);
      aVLTree0.insert(0);
      aVLTree0.insert((-2626));
      aVLTree0.delete(3090);
      aVLTree0.delete(0);
      aVLTree0.insert(3090);
      aVLTree0.insert((-517));
      aVLTree0.delete(1461);
      aVLTree0.delete((-517));
      aVLTree0.height();
      aVLTree0.delete((-2626));
      aVLTree0.delete(1);
      aVLTree0.height();
      aVLTree0.getRoot();
      aVLTree0.insert((-347));
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.insert(1);
      aVLTree0.find(2698);
      aVLTree_Node0.height = 0;
      aVLTree0.height();
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.delete(2531);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.height();
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(0);
      AVLTree aVLTree1 = new AVLTree();
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node0.left = aVLTree_Node1;
      aVLTree1.getRoot();
      aVLTree_Node0.right = null;
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree1.find(0);
      aVLTree1.insert(0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.height();
      AVLTree.Node aVLTree_Node0 = null;
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("com.baeldung.avltree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.delete(0);
      aVLTree0.delete(0);
      aVLTree0.find(0);
      int int0 = aVLTree0.height();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-1889));
      aVLTree0.find(0);
      int int0 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-2943));
      aVLTree0.insert(0);
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(1344);
      aVLTree0.insert(2530);
      aVLTree0.insert(1344);
      aVLTree0.height();
      aVLTree0.height();
      aVLTree0.insert(481);
      aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(2, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNull(aVLTree_Node0);
      
      int int0 = (-825);
      aVLTree0.insert((-3559));
      aVLTree0.insert((-825));
      aVLTree0.insert(1725);
      // Undeclared exception!
      try { 
        aVLTree0.insert((-825));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("com.baeldung.avltree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-1468));
      aVLTree0.insert(234);
      aVLTree0.insert(0);
      aVLTree0.height();
      aVLTree0.delete(0);
      aVLTree0.insert((-1));
      aVLTree0.getRoot();
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-1587));
      aVLTree0.delete((-1587));
      aVLTree0.delete(1273);
      aVLTree0.insert(1273);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node1 = aVLTree0.new Node(2291);
      aVLTree_Node0.right = aVLTree_Node1;
      int int0 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-271));
      aVLTree0.delete((-271));
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.insert((-4504));
      aVLTree0.insert((-1));
      // Undeclared exception!
      try { 
        aVLTree0.insert((-4504));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("com.baeldung.avltree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(2118);
      aVLTree0.insert(2118);
      aVLTree0.delete(346);
      aVLTree0.insert(346);
      aVLTree0.insert(0);
      aVLTree0.getRoot();
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      aVLTree0.height();
      aVLTree0.delete(346);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      int int0 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.height();
      aVLTree0.delete((-788));
      aVLTree0.insert((-301));
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node2 = aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node3 = aVLTree0.getRoot();
      aVLTree_Node2.left = aVLTree_Node1;
      aVLTree_Node3.right = aVLTree_Node2;
      aVLTree_Node2.right = aVLTree_Node3;
      aVLTree0.getBalance(aVLTree_Node2);
      aVLTree_Node3.key = (-779);
      // Undeclared exception!
      aVLTree0.find(0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(6267);
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(1);
      assertNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = 0;
      aVLTree0.delete(0);
      aVLTree0.delete(1874);
      aVLTree0.insert(533);
      aVLTree0.insert(0);
      // Undeclared exception!
      try { 
        aVLTree0.delete(533);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.baeldung.avltree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.insert(2716);
      // Undeclared exception!
      try { 
        aVLTree0.insert(2716);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("com.baeldung.avltree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.delete((-24));
      aVLTree0.delete(987);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.height();
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(0);
      int int0 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1189);
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(1189);
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(1162);
      int int0 = aVLTree0.height();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-1));
      int int0 = 3023;
      // Undeclared exception!
      try { 
        aVLTree0.insert((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("com.baeldung.avltree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-1));
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-1));
      aVLTree_Node0.key = (-1);
      // Undeclared exception!
      try { 
        aVLTree0.insert((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("com.baeldung.avltree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.getRoot();
      int int0 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = aVLTree0.height();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = (-2610);
      aVLTree0.insert((-2320));
      int int1 = 2550;
      aVLTree0.insert(2550);
      aVLTree0.insert((-496));
      aVLTree0.insert((-2610));
      aVLTree0.delete((-496));
      aVLTree0.insert((-496));
      aVLTree0.insert((-517));
      aVLTree0.delete((-517));
      aVLTree0.delete((-2610));
      aVLTree0.height();
      aVLTree0.insert(1);
      // Undeclared exception!
      try { 
        aVLTree0.insert(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("com.baeldung.avltree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-3605));
      aVLTree0.insert(234);
      aVLTree0.insert((-3605));
      aVLTree0.insert(0);
      aVLTree0.height();
      aVLTree0.insert(1);
      aVLTree0.delete(0);
      aVLTree0.find((-3605));
      aVLTree0.find(0);
      assertEquals(1, aVLTree0.height());
  }
}
